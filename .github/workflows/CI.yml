name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags: 
      - '*'
env: 
  PYTHON: ''
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        version:
          - '1.9.3'
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: Jimver/cuda-toolkit@v0.2.15
        id: cuda-toolkit
        with:
          cuda: '12.4.1'
      - run: echo "Installed cuda version is: ${{steps.cuda-toolkit.outputs.cuda}}"
      - run: echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
      - name: Install local dependencies
        run: |
          julia --project=. -e 'using Pkg; Pkg.develop(path="onnx_parser/NaiveNASflux")'
          julia --project=. -e 'using Pkg; Pkg.develop(path="onnx_parser/ONNXNaiveNASflux")'
          julia --project=. -e 'using Pkg; Pkg.instantiate()'
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
